/**
 * @typedef {import("../channel/Channel.js").default} Channel
 * @typedef {import("../channel/MirrorChannel.js").default} MirrorChannel
 * @typedef {import("../Node.js").default} Node
 * @typedef {import("../MirrorNode.js").default} MirrorNode
 * @typedef {import("../address_book/NodeAddressBook.js").default} NodeAddressBook
 */
/**
 * @typedef {import("./Client.js").NetworkName} NetworkName
 */
/**
 * @template {Channel | MirrorChannel} ChannelT
 * @typedef {import("../ManagedNode.js").default<ChannelT>} ManagedNode
 */
/**
 * @template {Channel | MirrorChannel} ChannelT
 * @template {Node | MirrorNode} NetworkNodeT
 * @template {*} SdkNetworkT
 * @template {{ [Symbol.iterator]: () => IterableIterator<SdkNetworkEntryT> }} IterableSdkNetworkT
 * @template {*} SdkNetworkEntryT
 */
export default class MangedNetwork<ChannelT extends import("../channel/Channel.js").default | import("../channel/MirrorChannel.js").default, NetworkNodeT extends import("../MirrorNode.js").default | import("../Node.js").default, SdkNetworkT extends unknown, IterableSdkNetworkT extends {
    [Symbol.iterator]: () => IterableIterator<SdkNetworkEntryT>;
}, SdkNetworkEntryT extends unknown> {
    /**
     * @param {(address: string) => ChannelT} createNetworkChannel
     */
    constructor(createNetworkChannel: (address: string) => ChannelT);
    /**
     * Map of node account ID (as a string)
     * to the node URL.
     *
     * @internal
     * @type {Map<string, NetworkNodeT>}
     */
    _network: Map<string, NetworkNodeT>;
    /**
     * List of node account IDs.
     *
     * @protected
     * @type {NetworkNodeT[]}
     */
    protected _nodes: NetworkNodeT[];
    /** @type {(address: string, cert?: string) => ChannelT} */
    _createNetworkChannel: (address: string, cert?: string | undefined) => ChannelT;
    /** @type {string | null} */
    _ledgerId: string | null;
    /** @type {number} */
    _minBackoff: number;
    /** @type {number} */
    _maxNodeAttempts: number;
    _transportSecurity: boolean;
    /**
     * @returns {boolean}
     */
    isTransportSecurity(): boolean;
    /**
     * @param {boolean} transportSecurity
     * @returns {this}
     */
    setTransportSecurity(transportSecurity: boolean): this;
    /**
     * @param {NetworkName} networkName
     * @returns {this}
     */
    setNetworkName(networkName: NetworkName): this;
    /**
     * @returns {string | null}
     */
    get networkName(): string | null;
    /**
     * @abstract
     * @param {SdkNetworkT} network
     * @returns {IterableSdkNetworkT}
     */
    _createIterableNetwork(network: SdkNetworkT): IterableSdkNetworkT;
    /**
     * @abstract
     * @param {SdkNetworkEntryT} entry
     * @returns {NetworkNodeT}
     */
    _createNodeFromNetworkEntry(entry: SdkNetworkEntryT): NetworkNodeT;
    /**
     * @abstract
     * @param {SdkNetworkT} network
     * @returns {number[]}
     */
    _getNodesToRemove(network: SdkNetworkT): number[];
    /**
     * @abstract
     * @param {NetworkNodeT} node
     */
    _removeNodeFromNetwork(node: NetworkNodeT): void;
    /**
     * @abstract
     * @param {SdkNetworkEntryT} entry
     * @returns {boolean}
     */
    _checkNetworkContainsEntry(entry: SdkNetworkEntryT): boolean;
    /**
     * @param {NetworkNodeT} node
     */
    _addNodeToNetwork(node: NetworkNodeT): void;
    _removeDeadNodes(): void;
    /**
     * @param {number} count
     * @returns {NetworkNodeT[]}
     */
    _getNumberOfMostHealthyNodes(count: number): NetworkNodeT[];
    /**
     * @param {SdkNetworkT} network
     * @returns {this}
     */
    setNetwork(network: SdkNetworkT): this;
    /**
     * @returns {number}
     */
    get maxNodeAttempts(): number;
    /**
     * @param {number} maxNodeAttempts
     * @returns {this}
     */
    setMaxNodeAttempts(maxNodeAttempts: number): this;
    /**
     * @returns {number}
     */
    get minBackoff(): number;
    /**
     * @param {number} minBackoff
     * @returns {this}
     */
    setMinBackoff(minBackoff: number): this;
    close(): void;
}
export type Channel = import("../channel/Channel.js").default;
export type MirrorChannel = import("../channel/MirrorChannel.js").default;
export type Node = import("../Node.js").default;
export type MirrorNode = import("../MirrorNode.js").default;
export type NodeAddressBook = import("../address_book/NodeAddressBook.js").default;
export type NetworkName = import("./Client.js").NetworkName;
export type ManagedNode<ChannelT extends import("../channel/Channel.js").default | import("../channel/MirrorChannel.js").default> = import("../ManagedNode.js").default<ChannelT>;
